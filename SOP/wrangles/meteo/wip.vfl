#include "assert.h"

float test(vector pos){
    float t = volumesample(0,'density',pos);
    float result = 0.0;
    if (t==0) result = 0.5;
    if (t==1) result = 10.0;
return result;

}

// Face area of a voxel (assuming it is a cube)
float
voxel_face_area(string volumeFieldName){
    float voxelDiameter = volumevoxeldiameter(0, volumeFieldName);
    float voxelSideLength = voxelDiameter / sqrt(3);
    float voxelFaceArea = pow(voxelSideLength, 2);
    return voxelFaceArea;
}


// Return the sum of all incident (simple) light on a voxel
float 
light_incidence_sum(vector lightDir; float distanceToLight){

    //assert(length(lightDir)==1);
    //assert(distanceToLight>0);

    float dotProductFace = 0.0;
    float dotProductFaceSum = 0.0;

    // Calculate the length of one of the faces of the voxel 
    // using the diameter and the formula for the 
    // length of a face of a regular cube (d / sqrt(3))
    float diameter = volumevoxeldiameter(0, 0);
    float faceLength = diameter / sqrt(3);

    // Calculate the area of one of the faces of the voxel using the face length
    float faceArea = faceLength*faceLength;


    // Define an array of vectors to store the directions of the cube faces 
    vector faceDirs[] = {
        {1,0,0}, /* +X direction*/
        {0,1,0}, /* +Y direction*/
        {0,0,1}, /* +Z direction*/
        {-1,0,0}, /* -X direction*/
        {0,-1,0}, /* -Y direction*/
        {0,0,-1} /* -Z direction*/
    };

    // Iterate over the array and print each direction
    foreach (vector dir; faceDirs) {

        // Dot product of the surface normal and the light direction
        float dotProduct = dot(dir, lightDir);

        // Total incident light over the face if facing the light direction
        if (dotProduct>0){
            dotProductFace = dotProduct * faceArea;
            dotProductFaceSum += dotProductFace;
        }
    }
    // Return the sum of all incident light 
    return dotProductFaceSum;
}


// March through a volume in a given direction 
// and return cumulative values of a float field
float
raymarch_vol(   vector pos;
                vector dir; 
                float distMax; 
                float epsilonMin; 
                float epsilonMax;
                float opticalDensityLimit;
                string volumeFieldName
                ) {

    // Normalize the ray direction and clamp some values
    // TODO - Arguments are read-only so this won't work.
    //dir = normalize(dir);
    //epsilonMin = clamp(epsilonMin, 0.0, distMax);
    //epsilonMax = clamp(epsilonMax, 0.0, distMax);
    //opticalDensityLimit = clamp(opticalDensityLimit, 0.0 , 1000.0);

    // Initialize the raymarching variables
    float dist = 0.0;
    float stepSize = epsilonMin;
    float opticalDensity = 0.0;
    //vector pos = v@P;

    // Variables used to increase stepsize if it appears 
    // to march through an empty region.
    int zeroCounter = 0;  
    int zeroThreshold = 10; 
    int zeroMultiplier = 2;

    // March the ray through the volume
    while (dist < distMax && opticalDensity < opticalDensityLimit) {

        // Sample the density at the current position
        opticalDensity += volumesample(0, volumeFieldName, pos);

        // Check if the current optical density is zero
        if (opticalDensity == 0) {
            zeroCounter++;  // Increment the counter
        } else {
            zeroCounter = 0;  // Reset the counter
        }
        // Increase the step size if the counter has reached the threshold
        if (zeroCounter >= zeroThreshold) {
            stepSize *= zeroMultiplier;
        }

        // Move the ray to the next position
        dist += stepSize;
        pos += stepSize * dir;
        // New stepSize
        stepSize = fit(dist, 0.0, distMax, epsilonMin, epsilonMax);
    }

  // Return the final optical density value
  //return opticalDensity;   
   return opticalDensity;
}

// voxelPosition: vector (in meters)
// voxelTemp: float (in Kelvins)
// voxelVolume: float (in cubic meters)
// ambientTemp: float (in Kelvins)
// altitude: float (in meters)
// liftCoefficient: float (dimensionless)
// Returns: vector (in Newtons)
vector liftForce(vector voxelPosition; float voxelTemp; float voxelVolume;
                float ambientTemp; float altitude; float liftCoefficient) {
  // Constants
  float temperatureLapseRate = 0.0065; // in Kelvins per meter
  float seaLevelTemperature = 288.16; // in Kelvins
  float seaLevelPressure = 101325; // in Pascals
  float specificGasConstant = 287.058; // in Joules per kilogram per Kelvin
  float exponent = 5.25588; // xponent in the ideal gas law

  // Calculate the temperature of the air at the given altitude 
  // using the temperature lapse rate
  float airTemp = seaLevelTemperature - temperatureLapseRate * altitude; // in Kelvins

  // Calculate the density of the air at the given altitude using the ideal gas law
  float pressure = seaLevelPressure * pow(1 - temperatureLapseRate * altitude / seaLevelTemperature, exponent); // in Pascals
  float airDensity = pressure / (specificGasConstant * airTemp); // in kg/cubicmeter

  // Calculate the upward force based on the temperature difference 
  // and the lift coefficient
  vector force = set(0, (voxelTemp - ambientTemp) * liftCoefficient * voxelVolume * airDensity, 0);

  // Return the upward force
  return force;
}


// Given v@P, return an array of positions of the neighboring voxels.
vector[] 
voxel_ns() {

  // Initialize a list to store the index coordinates of neighboring voxels.
  vector ns[];

  // Loop over the neighboring voxels in a 3x3x3 region around the center voxel.
  for (int i = -1; i <= 1; i++) {
    for (int j = -1; j <= 1; j++) {
      for (int k = -1; k <= 1; k++) {

        // Skip the center voxel.
        if (i == 0 && j == 0 && k == 0) continue;

        // Add the index coordinate of the current voxel to the list.
        append(ns, set(i, j, k) );

      } //k
    } //j
  } //i
  // Return the list of index coordinates.
  return ns;
}


float 
thermal_conductivity_air( float T ){
    // assumed default values
    //float T = 303.0;  //  Temperature in kelvin (K) 
    float k0 = 0.024; // Thermal conductivity of air at a ref temp T0 (W/mK)
    float T0 = 273.0; // Reference temperature in kelvin (K) */
    float S = 110.4; //Sutherland constant (K) 

    // Calculate the thermal conductivity of air using the Sutherland equation
    return k0 * pow(T / T0, 3.0 / 2.0) * (T0 + S) / (T + S);
}


// Heat transfer rate (in Watts) between two touching voxels
float 
heat_transfer(vector indexPos//;
              //float T1; 
              //float k;
              //float d; 
              //string volumeFieldName
              ) 
              {

    // Assumed values for arguments
    float T1 = 303.0;     // Temp of voxel in K 
    float k = 0.026;      // Thermal conductivity in (W/mK)
    float d = 0.1;        // Thickness of material separating the voxels                 
    string volumeFieldName = "temperature";
  

    //Surface area of interface between voxels
    float A = voxel_face_area(volumeFieldName);

    // Get the temperature of voxel B
    vector pos = volumeindextopos(0,volumeFieldName, indexPos);
    float T2 = volumesample(0, volumeFieldName, pos);

    // Calculate the heat transfer rate
    return k * A * (T1 - T2) / d;
}

// Calculates the heat transfer by radiation
//
// Parameters:
//   emissivity - the emissivity of the water (dimensionless) (default: 0.8)
//   temperature - the temperature of the water (in kelvin) (default: 303.0)
//   environmentTemperature - the temperature of the environment (in kelvin) (default: 300.0)
//
// Returns:
//   The rate of heat transfer by radiation (in watts)
float heat_transfer_by_radiation(float emissivity; float temperature; 
                                  float environmentTemperature)
{
    // Stefan-Boltzman constant (in W m-2 K-4)
    float stefanBoltzmanConstant = 5.670367e-8;

    // Surface area of the water exposed to the light (assumed value)
    float surfaceArea = voxel_face_area();

    // Calculate the rate of heat transfer by radiation using the Stefan-Boltzmann equation
    float heatTransfer = emissivity * stefanBoltzmanConstant * 
    surfaceArea * (pow(temperature, 4.0) - pow(environmentTemperature, 4.0));

    // Return the result
    return heatTransfer;
}


// Calculates the final temperature of the water when illuminated by the sun
//
// Parameters:
//   mass - the mass of the water (in kilograms)
//   specificHeatCapacity - the specific heat capacity of water (in joules per kilogram kelvin)
//   initialTemperature - the initial temperature of the water (in degrees Celsius)
//   surfaceArea - the surface area of the water exposed to the sun (in square meters)
//   solarIntensity - the solar intensity (in watts per square meter)
//   duration - the duration of the solar illumination (in seconds)
//
// Returns:
//   The final temperature of the water (as a float)
float finalTemperature(float mass; float specificHeatCapacity; float initialTemperature;
                       float surfaceArea; float solarIntensity; float duration)
{
    // Convert the initial temperature to kelvins
    float initialTemperatureK = initialTemperature + 273.15;

    // Calculate the final temperature of the water
    float finalTemperatureK = initialTemperatureK + (surfaceArea * solarIntensity * duration) / (mass * specificHeatCapacity);

    // Convert the final temperature back to degrees Celsius
    return finalTemperatureK - 273.15;
}



// Calculates the temperature at which water will evaporate
//
// Parameters:
//   vaporPressure - the vapor pressure of the water (in pascals)
//                   (default value: 0.01)
//   atmosphericPressure - the atmospheric pressure (in pascals)
//                        (default value: 101325)
//
// Returns:
//   The temperature at which the water will evaporate (as a float)
float evaporating_temperature(float vaporPressure; float atmosphericPressure)
{
    // The Antoine constants for water in the temperature range from 0 to 50°C
    float antoineA = 8.07131;
    float antoineB = 1730.63;
    float antoineC = 233.426;

    // Calculates the saturation vapor pressure of water at the given temperature
    float saturationVaporPressure = vaporPressure * atmosphericPressure /
     (atmosphericPressure - vaporPressure);

    // Calculates the temperature at which the water will evaporate using the Antoine equation
    float temperature = (antoineA - log(saturationVaporPressure)) / antoineB;

    // Returns the result as a float
    return temperature;
}



// Calculates the vapor pressure of water
//
// Parameters:
//   atmosphericPressure - the atmospheric pressure (in pascals)
//                        (default value: 101325)
//   temperature - the temperature of the water (in degrees Celsius)
//                 (default value: 303)
//
// Returns:
//   The vapor pressure of the water (as a float)
float vapour_pressure(float atmosphericPressure; float temperature)
{

    temperature = temperature - 273.15; // K to C

    // The Antoine constants for water in the temperature range from 0 to 50°C
    float antoineA = 8.07131;
    float antoineB = 1730.63;
    float antoineC = 233.426;

    // Calculates the saturation vapor pressure of water at the given temperature
    float saturationVaporPressure = pow(10, antoineA - antoineB / 
    (temperature + antoineC));

    // Calculates the vapor pressure of water using the ideal gas law
    float vaporPressure = saturationVaporPressure * atmosphericPressure / 
    (atmosphericPressure - saturationVaporPressure);

    // Returns the result as a float
    return vaporPressure;
}



// Calculates the relative humidity of air
//
// Parameters:
//   temperature - the temperature of the air (in degrees Celsius)
//   pressure - the pressure of the air (in pascals)
//
// Returns:
//   The relative humidity of the air (as a float)
float calc_relative_humidity(float temperature; float pressure)
{
    // The Antoine constants for water in the temperature range from 0 to 50°C
    float antoineA = 8.07131;
    float antoineB = 1730.63;
    float antoineC = 233.426;

    // Calculates the saturation vapor pressure of water at the given temperature
    float saturationVaporPressure = pow(10, antoineA - antoineB / 
    (temperature + antoineC));

    // Calculates the relative humidity as the ratio of the actual vapor pressure
    // to the saturation vapor pressure
    float relativeHumidity = pressure / saturationVaporPressure;

    // Returns the result as a float
    return relativeHumidity;
}


// Calculate the expansion of the air based on pressure and heat content
// pressure: pressure of the air in pascals
// heat_content: heat content of the air in joules
float expansion_at_pressure(float pressure; float heat_content)
{
    // Calculate the expansion of the air based on the pressure and heat content
    float expansion = (heat_content / pressure);

    // Return the expansion
    return expansion;
}


// Calculates boyancy based on altitude
float boyancy_up(vector pos; float AtmosphericTemperature; 
                float AtmosphericPressure; float voxelVolume;
                float voxelDensity)
                {
    float boyancyForce; //the upwards buoyant force in newtons (N)
    float gravity = -9.6; // gravitational accel in (m/s^2)
    float objectDensity; //density of the object in (kg/m^3)
    float objectVolume; // the volume of the object in (m^3)
    float displacedFluidDensity; // density of the fluid in (kg/m^3)
    float ambientDensity;

    objectVolume = voxelVolume;
    objectDensity = voxelVolume * voxelDensity;
    ambientDensity = AtmosphericPressure * AtmosphericTemperature;
    displacedFluidDensity = voxelVolume * ambientDensity;

    boyancyForce = gravity * objectDensity * objectVolume * displacedFluidDensity;

    return boyancyForce;
}